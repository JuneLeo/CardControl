import com.android.build.gradle.LibraryPlugin
import com.android.build.gradle.api.ApplicationVariant
import com.android.build.gradle.api.LibraryVariant
import com.android.build.gradle.internal.scope.VariantScope

import java.lang.reflect.Field
import java.util.function.Consumer

import static com.android.build.gradle.internal.publishing.AndroidArtifacts.ARTIFACT_TYPE

apply plugin: 'com.android.library'

android {
    compileSdkVersion 26



    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}
task dpsTask  {
    doLast {
        boolean isExecute = false
        //仅library生效，application请使用getApplicationVariants
        android.getLibraryVariants().all {
            if(isExecute){
                return
            }
            isExecute = true
            String name = it.getName(); //name为构建变体组合,根据实际情况获取
            //debugCompileClasspath
            Configuration dependenciesConfiguration = getProject().getConfigurations().getByName(name + "CompileClasspath");

            Action<AttributeContainer> attributes = new Action<AttributeContainer>() {
                @Override
                void execute(AttributeContainer container) {
                    //key : AndroidArtifacts.MODULE_PATH,AndroidArtifacts.ARTIFACT_TYPE
                    //AndroidArtifacts中type类型 aar,android-classes等，会帮我们过滤
                    // 配置有疑问 参考 VariantScopeImpl 中
                    //container.attribute(ARTIFACT_TYPE, "android-classes");
                }
            }


            ArtifactCollection artifactCollection =  dependenciesConfiguration.getIncoming()
                    .artifactView(new Action<org.gradle.api.artifacts.ArtifactView.ViewConfiguration>() {
                        @Override
                        void execute(org.gradle.api.artifacts.ArtifactView.ViewConfiguration viewConfiguration) {
                            viewConfiguration.lenient(true)
                            viewConfiguration.attributes(attributes);
                        }
                    }).getArtifacts();

                Set<ResolvedArtifactResult>  resolvedArtifactResults = artifactCollection.getArtifacts();

            String path_code = rootProject.rootDir.getAbsolutePath() + "/dependencies.csv";
            Writer fileWriter = new FileWriter(path_code)

            fileWriter.write("dependencies");
            fileWriter.write(",");
            fileWriter.write("size")
            fileWriter.write(",")
            fileWriter.write("path")
            // 如果觉得依赖项过多，可以过滤
            // 获取本build.gradle对应项目的去除重复项的全部依赖
            // dependenciesConfiguration.getIncoming().getResolutionResult().getAllComponents()
            // 获取本build.gradle对应项目的去除不重复项的全部依赖
            // dependenciesConfiguration.getIncoming().getResolutionResult().getAllDependencies()
            // 获取本build.gradle中的写入的依赖，依赖的依赖请遍历获取
            // dependenciesConfiguration.getIncoming().getResolutionResult().getRoot().getDependencies()

            resolvedArtifactResults.forEach(new Consumer<ResolvedArtifactResult>() {
                @Override
                void accept(ResolvedArtifactResult resolvedArtifactResult) {
//                    if(resolvedArtifactResult.getId().getComponentIdentifier() is org.gradle.internal.component.external.model.DefaultModuleComponentArtifactIdentifier){
//                       def model =  ((org.gradle.internal.component.external.model.DefaultModuleComponentArtifactIdentifier)resolvedArtifactResult).getComponentIdentifier();
//                        fileWriter.write(model.getGroup()+":"+model.getModule())
//                    } else {
//                        fileWriter.write()
//                    }

                    fileWriter.write("\n")
                    fileWriter.write(resolvedArtifactResult.getId().getComponentIdentifier().getDisplayName())
                    fileWriter.write(",")
                    fileWriter.write(resolvedArtifactResult.getFile().length()+"")
                    fileWriter.write(",")
                    fileWriter.write(resolvedArtifactResult.getFile().getAbsolutePath())
                }
            })
//
            fileWriter.close()

           //ResolvedDependencyResult
           //
            Set<ResolvedDependencyResult> dependencyResults =  dependenciesConfiguration.getIncoming().getResolutionResult().getRoot().getDependencies()
            Set<String> artifactSets = new HashSet<>();
            out(0,dependencyResults,artifactSets,resolvedArtifactResults);
        }
    }
}

def out(int index ,Set<ResolvedDependencyResult> dependencyResults,Set<String> artifactSets,Set<ResolvedArtifactResult>  resolvedArtifactResults){

    if(dependencyResults == null || dependencyResults.isEmpty()){
        return
    }
    for(ResolvedDependencyResult dependencyResult: dependencyResults){
        ResolvedComponentResult componentResult =  dependencyResult.getSelected()
        boolean isLast = false;
        if(dependencyResult == dependencyResults.last() && dependencyResults.size() > 1){
            isLast = true;
        }
        if(artifactSets.contains(componentResult.getModuleVersion().getModule().toString())){
            continue
        }
        long size = getSize(resolvedArtifactResults,componentResult.getModuleVersion());
        String displayName = getTag(index,isLast) + componentResult.getModuleVersion().toString()
        println( displayName + getSpace(displayName) + size)
        artifactSets.add(componentResult.getModuleVersion().getModule().toString())
        Set<ResolvedDependencyResult> sets = componentResult.getDependencies()
        out(index + 1,sets,artifactSets,resolvedArtifactResults)
    }
}

long getSize(Set<ResolvedArtifactResult>  resolvedArtifactResults,ModuleVersionIdentifier artifact){
    for(ResolvedArtifactResult result :resolvedArtifactResults){
        ComponentIdentifier identifier =  result.getId().getComponentIdentifier()
        if(identifier.getDisplayName().equals(artifact.toString())){
            return result.getFile().length()
        }
    }
    return 0;
}

String getSpace(String displayName){
    StringBuilder stringBuilder = new StringBuilder();
    int displayTotal = 100;
    int gap = displayTotal - displayName.length();
    if(gap > 0){
        for (i in 0..<gap) {
            stringBuilder.append(" ")
        }
    }
    stringBuilder.append("-|:")
    return stringBuilder.toString()
}


String getTag(int index,boolean isLast){
    StringBuilder stringBuilder = new StringBuilder();
    for (i in 0..<index) {
        stringBuilder.append("|    ")
    }
    if(isLast){
        stringBuilder.append("\\---")
    }else {
        stringBuilder.append("+---")
    }

}


task dsp(type:com.card.script.DspTask){

}

task dsp2(type:com.card.script.DiffDspTask){
    path='/Users/juneleo/amap/amap_android/dependencies.csv'
    comparePath='/Users/juneleo/amap/amap_android_backup/amap_android/dependencies.csv'
}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation('com.android.support:appcompat-v7:26.1.0') {
        exclude group:'com.android.support',module:'support-vector-drawable'
    }
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation project(':cardadapter')
    compileOnly 'io.reactivex:rxjava:1.2.3'
    compileOnly 'io.reactivex:rxandroid:1.2.1'
}
